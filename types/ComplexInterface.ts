/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface ComplexInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAddressUintReturnBoolView"
      | "acceptUintReturnAddressView"
      | "acceptUintReturnBoolView"
      | "acceptUintReturnString"
      | "acceptUintReturnStringView"
      | "acceptUintReturnUint"
      | "acceptUintReturnUintView"
      | "methodA"
      | "methodB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptAddressUintReturnBoolView",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptUintReturnAddressView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptUintReturnBoolView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptUintReturnString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptUintReturnStringView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptUintReturnUint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptUintReturnUintView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "methodA", values?: undefined): string;
  encodeFunctionData(functionFragment: "methodB", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptAddressUintReturnBoolView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptUintReturnAddressView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptUintReturnBoolView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptUintReturnString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptUintReturnStringView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptUintReturnUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptUintReturnUintView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "methodA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "methodB", data: BytesLike): Result;
}

export interface ComplexInterface extends BaseContract {
  connect(runner?: ContractRunner | null): ComplexInterface;
  waitForDeployment(): Promise<this>;

  interface: ComplexInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAddressUintReturnBoolView: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;

  acceptUintReturnAddressView: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  acceptUintReturnBoolView: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  acceptUintReturnString: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "nonpayable"
  >;

  acceptUintReturnStringView: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  acceptUintReturnUint: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  acceptUintReturnUintView: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  methodA: TypedContractMethod<[], [void], "nonpayable">;

  methodB: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAddressUintReturnBoolView"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "acceptUintReturnAddressView"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "acceptUintReturnBoolView"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "acceptUintReturnString"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptUintReturnStringView"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "acceptUintReturnUint"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptUintReturnUintView"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "methodA"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "methodB"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
